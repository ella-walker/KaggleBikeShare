"poison" = "purple3",
"electric" = "yellow2",
"ground" = "brown4",
"fairy" = "pink",
"fighting" = "orange1",
"psychic" = "magenta",
"rock" = "tan",
"ghost" = "thistle3",
"ice" = "lightblue",
"dragon" = "violet",
"dark" = "black",
"steel" = "slategray2",
"flying" = "skyblue"
)
) +
theme_minimal()
pokemon_size
library(ggplot2)
library(tidyverse)
library(tidytuesdayR)
library(dplyr)
library(ggplot2)
tuesdata <- tidytuesdayR::tt_load('2025-04-01')
pokemon <- tuesdata$pokemon_df
pokemon2 <- pokemon |>
dplyr::select(-species_id, -color_1, -color_2, -color_f, -egg_group_1, -egg_group_2, -url_icon, -url_image)
pokemon2$generation_id <- as.factor(pokemon2$generation_id)
ggplot(pokemon2, aes(x = generation_id, y = hp)) +
geom_boxplot(fill = "lightblue", alpha = .4, size = .7) +
labs(
title = "HP by Generation of Pokemon",
x = "",
y = "HP",
) +
scale_x_discrete() +
geom_jitter(position = position_jitter(0.3), color = "lightblue4", alpha = 0.35, size = 1) +
theme_minimal()
summary(aov(hp ~ generation_id, data = pokemon2))
pokemon2 <- mutate(pokemon2, heightft = height * 3.28084)
pokemon2 <- mutate(pokemon2, lbs = weight * 2.20462)
pokemon2 <- mutate(pokemon2, bmi = weight / (height)^2)
pokemon2
categorize_bmi <- function(bmi) {
if (is.na(bmi)) {
return("NA")
} else if (bmi < 18.5) {
return("Underweight")
} else if (bmi < 25) {
return("Normal weight")
} else if (bmi < 30) {
return("Overweight")
} else if (bmi < 100) {
return("Obese")
} else {
return("Chonker")
}
}
pokemon2$BMI_Category <- sapply(pokemon2$bmi, categorize_bmi)
pokemon2$BMI_Category
pokemon_size <- ggplot(pokemon2, aes(x = weight, y = height, color = type_1)) +
geom_point() +
labs(
title = "Height and Weight of Pokemon",
subtitle = "Colored by Type",
x = "Weight",
y = "Height",
color = "Pokemon Type"
) +
scale_color_manual(
values = c(
"grass" = "green4",
"fire" = "tomato",
"water" = "steelblue",
"bug" = "lightgreen",
"normal" = "gray",
"poison" = "purple3",
"electric" = "yellow2",
"ground" = "brown4",
"fairy" = "pink",
"fighting" = "orange1",
"psychic" = "magenta",
"rock" = "tan",
"ghost" = "thistle3",
"ice" = "lightblue",
"dragon" = "violet",
"dark" = "black",
"steel" = "slategray2",
"flying" = "skyblue"
)
) +
theme_minimal()
pokemon_size
library(ggplot2)
library(dplyr)
# Calculate IQR for weight and height
IQR_weight <- IQR(pokemon2$weight)
IQR_height <- IQR(pokemon2$height)
# Find outliers using the IQR method
pokemon2 <- pokemon2 %>%
mutate(
outlier_weight = ifelse(weight < (quantile(weight, 0.25) - 1.5 * IQR_weight) | weight > (quantile(weight, 0.75) + 1.5 * IQR_weight), TRUE, FALSE),
outlier_height = ifelse(height < (quantile(height, 0.25) - 1.5 * IQR_height) | height > (quantile(height, 0.75) + 1.5 * IQR_height), TRUE, FALSE)
)
# Combine the two conditions (outliers in either weight or height)
pokemon2 <- pokemon2 %>%
mutate(outlier = outlier_weight | outlier_height)
# Create the plot
pokemon_size <- ggplot(pokemon2, aes(x = weight, y = height, color = type_1)) +
geom_point() +
labs(
title = "Height and Weight of Pokemon",
subtitle = "Colored by Type",
x = "Weight",
y = "Height",
color = "Pokemon Type"
) +
scale_color_manual(
values = c(
"grass" = "green4",
"fire" = "tomato",
"water" = "steelblue",
"bug" = "lightgreen",
"normal" = "gray",
"poison" = "purple3",
"electric" = "yellow2",
"ground" = "brown4",
"fairy" = "pink",
"fighting" = "orange1",
"psychic" = "magenta",
"rock" = "tan",
"ghost" = "thistle3",
"ice" = "lightblue",
"dragon" = "violet",
"dark" = "black",
"steel" = "slategray2",
"flying" = "skyblue"
)
) +
theme_minimal() +
# Label outliers
geom_text(data = pokemon2 %>% filter(outlier == TRUE),
aes(label = rownames(pokemon2)),
hjust = -0.1, vjust = -0.5, size = 3)
# Display the plot
print(pokemon_size)
# Create the plot
pokemon_size <- ggplot(pokemon2, aes(x = weight, y = height, color = type_1)) +
geom_point() +
labs(
title = "Height and Weight of Pokemon",
subtitle = "Colored by Type",
x = "Weight",
y = "Height",
color = "Pokemon Type"
) +
scale_color_manual(
values = c(
"grass" = "green4",
"fire" = "tomato",
"water" = "steelblue",
"bug" = "lightgreen",
"normal" = "gray",
"poison" = "purple3",
"electric" = "yellow2",
"ground" = "brown4",
"fairy" = "pink",
"fighting" = "orange1",
"psychic" = "magenta",
"rock" = "tan",
"ghost" = "thistle3",
"ice" = "lightblue",
"dragon" = "violet",
"dark" = "black",
"steel" = "slategray2",
"flying" = "skyblue"
)
) +
theme_minimal() +
# Label outliers
geom_text(data = pokemon2 %>% filter(outlier == TRUE), aes(label = rownames(pokemon2)), hjust = -0.1, vjust = -0.5, size = 3)
# Display the plot
print(pokemon_size)
# Calculate IQR for weight and height
IQR_weight <- IQR(pokemon2$weight)
IQR_height <- IQR(pokemon2$height)
# Find outliers using the IQR method
pokemon2 <- pokemon2 %>%
mutate(
outlier_weight = ifelse(weight < (quantile(weight, 0.25) - 1.5 * IQR_weight) | weight > (quantile(weight, 0.75) + 1.5 * IQR_weight), TRUE, FALSE),
outlier_height = ifelse(height < (quantile(height, 0.25) - 1.5 * IQR_height) | height > (quantile(height, 0.75) + 1.5 * IQR_height), TRUE, FALSE)
)
# Combine the two conditions (outliers in either weight or height)
pokemon2 <- pokemon2 %>%
mutate(outlier = outlier_weight | outlier_height)
# Create the plot
pokemon_size <- ggplot(pokemon2, aes(x = weight, y = height, color = type_1)) +
geom_point() +
labs(
title = "Height and Weight of Pokemon",
subtitle = "Colored by Type",
x = "Weight",
y = "Height",
color = "Pokemon Type"
) +
scale_color_manual(
values = c(
"grass" = "green4",
"fire" = "tomato",
"water" = "steelblue",
"bug" = "lightgreen",
"normal" = "gray",
"poison" = "purple3",
"electric" = "yellow2",
"ground" = "brown4",
"fairy" = "pink",
"fighting" = "orange1",
"psychic" = "magenta",
"rock" = "tan",
"ghost" = "thistle3",
"ice" = "lightblue",
"dragon" = "violet",
"dark" = "black",
"steel" = "slategray2",
"flying" = "skyblue"
)
) +
theme_minimal() +
# Label outliers
geom_text(data = pokemon2 %>% filter(outlier == TRUE),
aes(label = rownames(pokemon2)),
hjust = -0.1, vjust = -0.5, size = 3)
# Display the plot
print(pokemon_size)
library(ggplot2)
library(dplyr)
# Assuming pokemon2 has a column 'name' for Pokémon names
# Calculate IQR for weight and height
IQR_weight <- IQR(pokemon2$weight)
IQR_height <- IQR(pokemon2$height)
# Find outliers using the IQR method
pokemon2 <- pokemon2 %>%
mutate(
outlier_weight = ifelse(weight < (quantile(weight, 0.25) - 1.5 * IQR_weight) | weight > (quantile(weight, 0.75) + 1.5 * IQR_weight), TRUE, FALSE),
outlier_height = ifelse(height < (quantile(height, 0.25) - 1.5 * IQR_height) | height > (quantile(height, 0.75) + 1.5 * IQR_height), TRUE, FALSE)
)
# Combine the two conditions (outliers in either weight or height)
pokemon2 <- pokemon2 %>%
mutate(outlier = outlier_weight | outlier_height)
# Create the plot
pokemon_size <- ggplot(pokemon2, aes(x = weight, y = height, color = type_1)) +
geom_point() +
labs(
title = "Height and Weight of Pokemon",
subtitle = "Colored by Type",
x = "Weight",
y = "Height",
color = "Pokemon Type"
) +
scale_color_manual(
values = c(
"grass" = "green4",
"fire" = "tomato",
"water" = "steelblue",
"bug" = "lightgreen",
"normal" = "gray",
"poison" = "purple3",
"electric" = "yellow2",
"ground" = "brown4",
"fairy" = "pink",
"fighting" = "orange1",
"psychic" = "magenta",
"rock" = "tan",
"ghost" = "thistle3",
"ice" = "lightblue",
"dragon" = "violet",
"dark" = "black",
"steel" = "slategray2",
"flying" = "skyblue"
)
) +
theme_minimal() +
# Label outliers
geom_text(data = pokemon2 %>% filter(outlier == TRUE),
aes(label = name),  # Assuming you have a column 'name' for Pokémon names
hjust = -0.1, vjust = -0.5, size = 3)
# Display the plot
print(pokemon_size)
colnames(pokemon2)
library(ggplot2)
library(dplyr)
# Assuming pokemon2 has a column 'name' for Pokémon names
# Calculate IQR for weight and height
IQR_weight <- IQR(pokemon2$weight)
IQR_height <- IQR(pokemon2$height)
# Find outliers using the IQR method
pokemon2 <- pokemon2 %>%
mutate(
outlier_weight = ifelse(weight < (quantile(weight, 0.25) - 1.5 * IQR_weight) | weight > (quantile(weight, 0.75) + 1.5 * IQR_weight), TRUE, FALSE),
outlier_height = ifelse(height < (quantile(height, 0.25) - 1.5 * IQR_height) | height > (quantile(height, 0.75) + 1.5 * IQR_height), TRUE, FALSE)
)
# Combine the two conditions (outliers in either weight or height)
pokemon2 <- pokemon2 %>%
mutate(outlier = outlier_weight | outlier_height)
# Create the plot
pokemon_size <- ggplot(pokemon2, aes(x = weight, y = height, color = type_1)) +
geom_point() +
labs(
title = "Height and Weight of Pokemon",
subtitle = "Colored by Type",
x = "Weight",
y = "Height",
color = "Pokemon Type"
) +
scale_color_manual(
values = c(
"grass" = "green4",
"fire" = "tomato",
"water" = "steelblue",
"bug" = "lightgreen",
"normal" = "gray",
"poison" = "purple3",
"electric" = "yellow2",
"ground" = "brown4",
"fairy" = "pink",
"fighting" = "orange1",
"psychic" = "magenta",
"rock" = "tan",
"ghost" = "thistle3",
"ice" = "lightblue",
"dragon" = "violet",
"dark" = "black",
"steel" = "slategray2",
"flying" = "skyblue"
)
) +
theme_minimal() +
# Label outliers
geom_text(data = pokemon2 %>% filter(outlier == TRUE),
aes(label = id),  # Assuming you have a column 'name' for Pokémon names
hjust = -0.1, vjust = -0.5, size = 3)
# Display the plot
print(pokemon_size)
library(ggplot2)
library(dplyr)
# Assuming pokemon2 has a column 'name' for Pokémon names
# Calculate IQR for weight and height
IQR_weight <- IQR(pokemon2$weight)
IQR_height <- IQR(pokemon2$height)
# Find outliers using the IQR method
pokemon2 <- pokemon2 %>%
mutate(
outlier_weight = ifelse(weight < (quantile(weight, 0.25) - 1.5 * IQR_weight) | weight > (quantile(weight, 0.75) + 1.5 * IQR_weight), TRUE, FALSE),
outlier_height = ifelse(height < (quantile(height, 0.25) - 1.5 * IQR_height) | height > (quantile(height, 0.75) + 1.5 * IQR_height), TRUE, FALSE)
)
# Combine the two conditions (outliers in either weight or height)
pokemon2 <- pokemon2 %>%
mutate(outlier = outlier_weight | outlier_height)
# Create the plot
pokemon_size <- ggplot(pokemon2, aes(x = weight, y = height, color = type_1)) +
geom_point() +
labs(
title = "Height and Weight of Pokemon",
subtitle = "Colored by Type",
x = "Weight",
y = "Height",
color = "Pokemon Type"
) +
scale_color_manual(
values = c(
"grass" = "green4",
"fire" = "tomato",
"water" = "steelblue",
"bug" = "lightgreen",
"normal" = "gray",
"poison" = "purple3",
"electric" = "yellow2",
"ground" = "brown4",
"fairy" = "pink",
"fighting" = "orange1",
"psychic" = "magenta",
"rock" = "tan",
"ghost" = "thistle3",
"ice" = "lightblue",
"dragon" = "violet",
"dark" = "black",
"steel" = "slategray2",
"flying" = "skyblue"
)
) +
theme_minimal() +
# Label outliers
geom_text(data = pokemon2 %>% filter(outlier == TRUE),
aes(label = pokemon),  # Assuming you have a column 'name' for Pokémon names
hjust = -0.1, vjust = -0.5, size = 3)
# Display the plot
print(pokemon_size)
# Create the plot
pokemon_size <- ggplot(pokemon2, aes(x = weight, y = height, color = type_1)) +
geom_point() +
labs(
title = "Height and Weight of Pokemon",
subtitle = "Colored by Type",
x = "Weight",
y = "Height",
color = "Pokemon Type"
) +
scale_color_manual(
values = c(
"grass" = "green4",
"fire" = "tomato",
"water" = "steelblue",
"bug" = "lightgreen",
"normal" = "gray",
"poison" = "purple3",
"electric" = "yellow2",
"ground" = "brown4",
"fairy" = "pink",
"fighting" = "orange1",
"psychic" = "magenta",
"rock" = "tan",
"ghost" = "thistle3",
"ice" = "lightblue",
"dragon" = "violet",
"dark" = "black",
"steel" = "slategray2",
"flying" = "skyblue"
)
) +
theme_minimal() +
# Label outliers
geom_text(data = pokemon2 %>% filter(outlier == TRUE),
aes(label = pokemon),  # Assuming you have a column 'name' for Pokémon names
hjust = -0.1, vjust = -0.5, size = 3)
# Display the plot
print(pokemon_size)
pnorm(2)
(7/103) - .10
sqrt((.1*.9)/103)
-0.03203883 / 0.02955988
pnorm(-1.083862)
x <- c(69, 35)
sd(x)
n <- 2
x_bar <- mean(x)
t_crit <- qt(.975, 1)
t_crit
moe <- t_crit * sd(x) / sqrt(2)
c(x_bar - moe, x_bar + moe)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidymodels)
install.packages("tidymodels")
library(tidymodels)
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
x <- sample(c(0,1), 10, replace = TRUE)
library(tidyverse)
n <- 10
p <- .5
x <- sample(c(0,1), n, replace = TRUE)
n <- 10
p <- .5
x <- sample(c(0,1), n, replace = TRUE, prob = c(1-p, p))
x
prod(p^x * (1-p)^(1-x))
n <- 10
p <- .9
x <- sample(c(0,1), n, replace = TRUE, prob = c(1-p, p))
x
prod(p^x * (1-p)^(1-x))
install.packages("vroom")
library(vroom)
vroom(bike-sharing-demand)
vroom("bike-sharing-demand")
vroom("C:/User/STAT 348/bike-sharing-demand")
vroom("C:/User/Documents/STAT 348/bike-sharing-demand")
vroom("C:/User/Documents/STAT 348/bike-sharing-demand/train.csv")
vroom("C:/User/EllaWalker/Documents/STAT 348/bike-sharing-demand/train.csv")
vroom("train.csv")
vroom("C:/User/ellawalker/Documents/STAT 348/bike-sharing-demand/train.csv")
getwd()
setwd("~/Documents/STAT 348/KaggleBikeShare")
list.files()
vroom("~/Documents/STAT 348/bike-sharing-demand/train.csv")
vroom("~/Documents/STAT 348/KaggleBikeShare/bike-sharing-demand/train.csv")
bike <- vroom("~/Documents/STAT 348/KaggleBikeShare/bike-sharing-demand/train.csv")
dplyr::glimpse(bike)
skimr::skim(bike)
install.packages("skimr")
skimr::skim(bike)
library(skimr)
skimr::skim(bike)
DataExplorer::plot_intro(bike)
install.packages("DataExplorer")
DataExplorer::plot_intro(bike)
DataExplorer::plot_correlation(bike)
DataExplorer::plot_bar(bike)
DataExplorer::plot_histogram(bike)
DataExplorer::plot_missing(bike)
GGally::ggpains(bike)
GGally::ggpair s(bike)
GGally::ggpairs(bike)
install.packages("GGally")
GGally::ggpairs(bike)
GGally::ggpairs(bike)
